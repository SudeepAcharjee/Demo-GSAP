{
  "version": 3,
  "sources": ["../../@studio-freight/lenis/src/maths.js", "../../@studio-freight/lenis/src/animate.js", "../../@studio-freight/lenis/src/dimensions.js", "../../@studio-freight/lenis/src/debounce.js", "../../@studio-freight/lenis/src/emitter.js", "../../@studio-freight/lenis/src/virtual-scroll.js", "../../@studio-freight/lenis/src/index.js", "../../locomotive-scroll/src/core/IO.ts", "../../locomotive-scroll/src/utils/maths.ts", "../../locomotive-scroll/src/core/ScrollElement.ts", "../../locomotive-scroll/src/core/Core.ts", "../../locomotive-scroll/src/core/RO.ts", "../../locomotive-scroll/src/index.ts"],
  "sourcesContent": ["// Clamp a value between a minimum and maximum value\r\nexport function clamp(min, input, max) {\r\n  return Math.max(min, Math.min(input, max))\r\n}\r\n\r\n// Truncate a floating-point number to a specified number of decimal places\r\nexport function truncate(value, decimals = 0) {\r\n  return parseFloat(value.toFixed(decimals))\r\n}\r\n\r\n// Linearly interpolate between two values using an amount (0 <= t <= 1)\r\nexport function lerp(x, y, t) {\r\n  return (1 - t) * x + t * y\r\n}\r\n\r\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\r\nexport function damp(x, y, lambda, dt) {\r\n  return lerp(x, y, 1 - Math.exp(-lambda * dt))\r\n}\r\n\r\n// Calculate the modulo of the dividend and divisor while keeping the result within the same sign as the divisor\r\n// https://anguscroll.com/just/just-modulo\r\nexport function modulo(n, d) {\r\n  return ((n % d) + d) % d\r\n}\r\n", "import { clamp, damp } from './maths'\r\n\r\n// Animate class to handle value animations with lerping or easing\r\nexport class Animate {\r\n  // Advance the animation by the given delta time\r\n  advance(deltaTime) {\r\n    if (!this.isRunning) return\r\n\r\n    let completed = false\r\n\r\n    if (this.lerp) {\r\n      this.value = damp(this.value, this.to, this.lerp * 60, deltaTime)\r\n      if (Math.round(this.value) === this.to) {\r\n        this.value = this.to\r\n        completed = true\r\n      }\r\n    } else {\r\n      this.currentTime += deltaTime\r\n      const linearProgress = clamp(0, this.currentTime / this.duration, 1)\r\n\r\n      completed = linearProgress >= 1\r\n      const easedProgress = completed ? 1 : this.easing(linearProgress)\r\n      this.value = this.from + (this.to - this.from) * easedProgress\r\n    }\r\n\r\n    // Call the onUpdate callback with the current value and completed status\r\n    this.onUpdate?.(this.value, completed)\r\n\r\n    if (completed) {\r\n      this.stop()\r\n    }\r\n  }\r\n\r\n  // Stop the animation\r\n  stop() {\r\n    this.isRunning = false\r\n  }\r\n\r\n  // Set up the animation from a starting value to an ending value\r\n  // with optional parameters for lerping, duration, easing, and onUpdate callback\r\n  fromTo(\r\n    from,\r\n    to,\r\n    { lerp = 0.1, duration = 1, easing = (t) => t, onStart, onUpdate }\r\n  ) {\r\n    this.from = this.value = from\r\n    this.to = to\r\n    this.lerp = lerp\r\n    this.duration = duration\r\n    this.easing = easing\r\n    this.currentTime = 0\r\n    this.isRunning = true\r\n\r\n    onStart?.()\r\n    this.onUpdate = onUpdate\r\n  }\r\n}\r\n", "import { debounce } from './debounce'\r\n\r\nexport class Dimensions {\r\n  constructor({ wrapper, content, autoResize = true } = {}) {\r\n    this.wrapper = wrapper\r\n    this.content = content\r\n\r\n    if (autoResize) {\r\n      const resize = debounce(this.resize, 250)\r\n\r\n      if (this.wrapper !== window) {\r\n        this.wrapperResizeObserver = new ResizeObserver(resize)\r\n        this.wrapperResizeObserver.observe(this.wrapper)\r\n      }\r\n\r\n      this.contentResizeObserver = new ResizeObserver(resize)\r\n      this.contentResizeObserver.observe(this.content)\r\n    }\r\n\r\n    this.resize()\r\n  }\r\n\r\n  destroy() {\r\n    this.wrapperResizeObserver?.disconnect()\r\n    this.contentResizeObserver?.disconnect()\r\n  }\r\n\r\n  resize = () => {\r\n    this.onWrapperResize()\r\n    this.onContentResize()\r\n  }\r\n\r\n  onWrapperResize = () => {\r\n    if (this.wrapper === window) {\r\n      this.width = window.innerWidth\r\n      this.height = window.innerHeight\r\n    } else {\r\n      this.width = this.wrapper.clientWidth\r\n      this.height = this.wrapper.clientHeight\r\n    }\r\n  }\r\n\r\n  onContentResize = () => {\r\n    this.scrollHeight = this.content.scrollHeight\r\n    this.scrollWidth = this.content.scrollWidth\r\n  }\r\n\r\n  get limit() {\r\n    return {\r\n      x: this.scrollWidth - this.width,\r\n      y: this.scrollHeight - this.height,\r\n    }\r\n  }\r\n}\r\n", "export function debounce(callback, delay) {\r\n  let timer\r\n  return function () {\r\n    let args = arguments\r\n    let context = this\r\n    clearTimeout(timer)\r\n    timer = setTimeout(function () {\r\n      callback.apply(context, args)\r\n    }, delay)\r\n  }\r\n}\r\n", "export class Emitter {\r\n  constructor() {\r\n    this.events = {}\r\n  }\r\n\r\n  emit(event, ...args) {\r\n    let callbacks = this.events[event] || []\r\n    for (let i = 0, length = callbacks.length; i < length; i++) {\r\n      callbacks[i](...args)\r\n    }\r\n  }\r\n\r\n  on(event, cb) {\r\n    // Add the callback to the event's callback list, or create a new list with the callback\r\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\r\n\r\n    // Return an unsubscribe function\r\n    return () => {\r\n      this.events[event] = this.events[event]?.filter((i) => cb !== i)\r\n    }\r\n  }\r\n\r\n  off(event, callback) {\r\n    this.events[event] = this.events[event]?.filter((i) => callback !== i)\r\n  }\r\n\r\n  destroy() {\r\n    this.events = {}\r\n  }\r\n}\r\n", "import { Emitter } from './emitter'\r\nimport { clamp } from './maths'\r\n\r\nexport class VirtualScroll {\r\n  constructor(\r\n    element,\r\n    { wheelMultiplier = 1, touchMultiplier = 2, normalizeWheel = false }\r\n  ) {\r\n    this.element = element\r\n    this.wheelMultiplier = wheelMultiplier\r\n    this.touchMultiplier = touchMultiplier\r\n    this.normalizeWheel = normalizeWheel\r\n\r\n    this.touchStart = {\r\n      x: null,\r\n      y: null,\r\n    }\r\n\r\n    this.emitter = new Emitter()\r\n\r\n    this.element.addEventListener('wheel', this.onWheel, { passive: false })\r\n    this.element.addEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.addEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Add an event listener for the given event and callback\r\n  on(event, callback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  // Remove all event listeners and clean up\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.element.removeEventListener('wheel', this.onWheel, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchstart', this.onTouchStart, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchmove', this.onTouchMove, {\r\n      passive: false,\r\n    })\r\n    this.element.removeEventListener('touchend', this.onTouchEnd, {\r\n      passive: false,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'touchstart' event\r\n  onTouchStart = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n  }\r\n\r\n  // Event handler for 'touchmove' event\r\n  onTouchMove = (event) => {\r\n    const { clientX, clientY } = event.targetTouches\r\n      ? event.targetTouches[0]\r\n      : event\r\n\r\n    const deltaX = -(clientX - this.touchStart.x) * this.touchMultiplier\r\n    const deltaY = -(clientY - this.touchStart.y) * this.touchMultiplier\r\n\r\n    this.touchStart.x = clientX\r\n    this.touchStart.y = clientY\r\n\r\n    this.lastDelta = {\r\n      x: deltaX,\r\n      y: deltaY,\r\n    }\r\n\r\n    this.emitter.emit('scroll', {\r\n      deltaX,\r\n      deltaY,\r\n      event,\r\n    })\r\n  }\r\n\r\n  onTouchEnd = (event) => {\r\n    this.emitter.emit('scroll', {\r\n      deltaX: this.lastDelta.x,\r\n      deltaY: this.lastDelta.y,\r\n      event,\r\n    })\r\n  }\r\n\r\n  // Event handler for 'wheel' event\r\n  onWheel = (event) => {\r\n    let { deltaX, deltaY } = event\r\n\r\n    if (this.normalizeWheel) {\r\n      deltaX = clamp(-100, deltaX, 100)\r\n      deltaY = clamp(-100, deltaY, 100)\r\n    }\r\n\r\n    deltaX *= this.wheelMultiplier\r\n    deltaY *= this.wheelMultiplier\r\n\r\n    this.emitter.emit('scroll', { deltaX, deltaY, event })\r\n  }\r\n}\r\n", "import { version } from '../package.json'\r\nimport { Animate } from './animate'\r\nimport { Dimensions } from './dimensions'\r\nimport { Emitter } from './emitter'\r\nimport { clamp, modulo } from './maths'\r\nimport { VirtualScroll } from './virtual-scroll'\r\n\r\n// Technical explanation\r\n// - listen to 'wheel' events\r\n// - prevent 'wheel' event to prevent scroll\r\n// - normalize wheel delta\r\n// - add delta to targetScroll\r\n// - animate scroll to targetScroll (smooth context)\r\n// - if animation is not running, listen to 'scroll' events (native context)\r\n\r\nexport default class Lenis {\r\n  // isScrolling = true when scroll is animating\r\n  // isStopped = true if user should not be able to scroll - enable/disable programmatically\r\n  // isSmooth = true if scroll should be animated\r\n  // isLocked = same as isStopped but enabled/disabled when scroll reaches target\r\n\r\n  /**\r\n   * @typedef {(t: number) => number} EasingFunction\r\n   * @typedef {'vertical' | 'horizontal'} Orientation\r\n   * @typedef {'vertical' | 'horizontal' | 'both'} GestureOrientation\r\n   *\r\n   * @typedef LenisOptions\r\n   * @property {Window | HTMLElement} [wrapper]\r\n   * @property {HTMLElement} [content]\r\n   * @property {Window | HTMLElement} [wheelEventsTarget] // deprecated\r\n   * @property {Window | HTMLElement} [eventsTarget]\r\n   * @property {boolean} [smoothWheel]\r\n   * @property {boolean} [smoothTouch]\r\n   * @property {boolean} [syncTouch]\r\n   * @property {number} [syncTouchLerp]\r\n   * @property {number} [__iosNoInertiaSyncTouchLerp]\r\n   * @property {number} [touchInertiaMultiplier]\r\n   * @property {number} [duration]\r\n   * @property {EasingFunction} [easing]\r\n   * @property {number} [lerp]\r\n   * @property {boolean} [infinite]\r\n   * @property {Orientation} [orientation]\r\n   * @property {GestureOrientation} [gestureOrientation]\r\n   * @property {number} [touchMultiplier]\r\n   * @property {number} [wheelMultiplier]\r\n   * @property {boolean} [normalizeWheel]\r\n   * @property {boolean} [autoResize]\r\n   *\r\n   * @param {LenisOptions}\r\n   */\r\n  constructor({\r\n    wrapper = window,\r\n    content = document.documentElement,\r\n    wheelEventsTarget = wrapper, // deprecated\r\n    eventsTarget = wheelEventsTarget,\r\n    smoothWheel = true,\r\n    smoothTouch = false,\r\n    syncTouch = false,\r\n    syncTouchLerp = 0.1,\r\n    __iosNoInertiaSyncTouchLerp = 0.4, // should be 1 but had to leave 0.4 for iOS (testing purpose)\r\n    touchInertiaMultiplier = 35,\r\n    duration, // in seconds\r\n    easing = (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),\r\n    lerp = !duration && 0.1,\r\n    infinite = false,\r\n    orientation = 'vertical', // vertical, horizontal\r\n    gestureOrientation = 'vertical', // vertical, horizontal, both\r\n    touchMultiplier = 1,\r\n    wheelMultiplier = 1,\r\n    normalizeWheel = false,\r\n    autoResize = true,\r\n  } = {}) {\r\n    window.lenisVersion = version\r\n\r\n    // if wrapper is html or body, fallback to window\r\n    if (wrapper === document.documentElement || wrapper === document.body) {\r\n      wrapper = window\r\n    }\r\n\r\n    this.options = {\r\n      wrapper,\r\n      content,\r\n      wheelEventsTarget,\r\n      eventsTarget,\r\n      smoothWheel,\r\n      smoothTouch,\r\n      syncTouch,\r\n      syncTouchLerp,\r\n      __iosNoInertiaSyncTouchLerp,\r\n      touchInertiaMultiplier,\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      infinite,\r\n      gestureOrientation,\r\n      orientation,\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      normalizeWheel,\r\n      autoResize,\r\n    }\r\n\r\n    this.animate = new Animate()\r\n    this.emitter = new Emitter()\r\n    this.dimensions = new Dimensions({ wrapper, content, autoResize })\r\n    this.toggleClass('lenis', true)\r\n\r\n    this.velocity = 0\r\n    this.isLocked = false\r\n    this.isStopped = false\r\n    this.isSmooth = syncTouch || smoothWheel || smoothTouch\r\n    this.isScrolling = false\r\n    this.targetScroll = this.animatedScroll = this.actualScroll\r\n\r\n    this.options.wrapper.addEventListener('scroll', this.onNativeScroll, {\r\n      passive: false,\r\n    })\r\n\r\n    this.virtualScroll = new VirtualScroll(eventsTarget, {\r\n      touchMultiplier,\r\n      wheelMultiplier,\r\n      normalizeWheel,\r\n    })\r\n    this.virtualScroll.on('scroll', this.onVirtualScroll)\r\n  }\r\n\r\n  destroy() {\r\n    this.emitter.destroy()\r\n\r\n    this.options.wrapper.removeEventListener('scroll', this.onNativeScroll, {\r\n      passive: false,\r\n    })\r\n\r\n    this.virtualScroll.destroy()\r\n    this.dimensions.destroy()\r\n\r\n    this.toggleClass('lenis', false)\r\n    this.toggleClass('lenis-smooth', false)\r\n    this.toggleClass('lenis-scrolling', false)\r\n    this.toggleClass('lenis-stopped', false)\r\n    this.toggleClass('lenis-locked', false)\r\n  }\r\n\r\n  on(event, callback) {\r\n    return this.emitter.on(event, callback)\r\n  }\r\n\r\n  off(event, callback) {\r\n    return this.emitter.off(event, callback)\r\n  }\r\n\r\n  setScroll(scroll) {\r\n    // apply scroll value immediately\r\n    if (this.isHorizontal) {\r\n      this.rootElement.scrollLeft = scroll\r\n    } else {\r\n      this.rootElement.scrollTop = scroll\r\n    }\r\n  }\r\n\r\n  onVirtualScroll = ({ deltaX, deltaY, event }) => {\r\n    // keep zoom feature\r\n    if (event.ctrlKey) return\r\n\r\n    const isTouch = event.type.includes('touch')\r\n    const isWheel = event.type.includes('wheel')\r\n\r\n    if (\r\n      (this.options.gestureOrientation === 'both' &&\r\n        deltaX === 0 &&\r\n        deltaY === 0) || // \"touchend\" events prevents \"click\"\r\n      (this.options.gestureOrientation === 'vertical' && deltaY === 0) || // trackpad previous/next page gesture\r\n      (this.options.gestureOrientation === 'horizontal' && deltaX === 0) ||\r\n      (isTouch &&\r\n        this.options.gestureOrientation === 'vertical' &&\r\n        this.scroll === 0 &&\r\n        !this.options.infinite &&\r\n        deltaY <= 0) // touch pull to refresh\r\n    )\r\n      return\r\n\r\n    // catch if scrolling on nested scroll elements\r\n    let composedPath = event.composedPath()\r\n    composedPath = composedPath.slice(0, composedPath.indexOf(this.rootElement)) // remove parents elements\r\n\r\n    if (\r\n      !!composedPath.find(\r\n        (node) =>\r\n          node.hasAttribute?.('data-lenis-prevent') ||\r\n          (isTouch && node.hasAttribute?.('data-lenis-prevent-touch')) ||\r\n          (isWheel && node.hasAttribute?.('data-lenis-prevent-wheel')) ||\r\n          node.classList?.contains('lenis') // nested lenis instance\r\n      )\r\n    )\r\n      return\r\n\r\n    if (this.isStopped || this.isLocked) {\r\n      event.preventDefault()\r\n      return\r\n    }\r\n\r\n    this.isSmooth =\r\n      ((this.options.smoothTouch || this.options.syncTouch) && isTouch) ||\r\n      (this.options.smoothWheel && isWheel)\r\n\r\n    if (!this.isSmooth) {\r\n      this.isScrolling = false\r\n      this.animate.stop()\r\n      return\r\n    }\r\n\r\n    event.preventDefault()\r\n\r\n    let delta = deltaY\r\n    if (this.options.gestureOrientation === 'both') {\r\n      delta = Math.abs(deltaY) > Math.abs(deltaX) ? deltaY : deltaX\r\n    } else if (this.options.gestureOrientation === 'horizontal') {\r\n      delta = deltaX\r\n    }\r\n\r\n    const syncTouch = isTouch && this.options.syncTouch\r\n    const isTouchEnd = isTouch && event.type === 'touchend'\r\n    const hasTouchInertia = isTouchEnd && Math.abs(delta) > 1\r\n    if (hasTouchInertia) {\r\n      delta = this.velocity * this.options.touchInertiaMultiplier\r\n    }\r\n\r\n    this.scrollTo(this.targetScroll + delta, {\r\n      programmatic: false,\r\n      ...(syncTouch && {\r\n        lerp: hasTouchInertia\r\n          ? this.syncTouchLerp\r\n          : this.options.__iosNoInertiaSyncTouchLerp,\r\n      }),\r\n    })\r\n  }\r\n\r\n  resize() {\r\n    this.dimensions.resize()\r\n  }\r\n\r\n  emit() {\r\n    this.emitter.emit('scroll', this)\r\n  }\r\n\r\n  onNativeScroll = () => {\r\n    if (this.__preventNextScrollEvent) return\r\n\r\n    if (!this.isScrolling) {\r\n      const lastScroll = this.animatedScroll\r\n      this.animatedScroll = this.targetScroll = this.actualScroll\r\n      this.velocity = 0\r\n      this.direction = Math.sign(this.animatedScroll - lastScroll)\r\n      this.emit()\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    this.isLocked = false\r\n    this.isScrolling = false\r\n    this.animatedScroll = this.targetScroll = this.actualScroll\r\n    this.velocity = 0\r\n    this.animate.stop()\r\n  }\r\n\r\n  start() {\r\n    this.isStopped = false\r\n\r\n    this.reset()\r\n  }\r\n\r\n  stop() {\r\n    this.isStopped = true\r\n    this.animate.stop()\r\n\r\n    this.reset()\r\n  }\r\n\r\n  raf(time) {\r\n    const deltaTime = time - (this.time || time)\r\n    this.time = time\r\n\r\n    this.animate.advance(deltaTime * 0.001)\r\n  }\r\n\r\n  scrollTo(\r\n    target,\r\n    {\r\n      offset = 0,\r\n      immediate = false,\r\n      lock = false,\r\n      duration = this.options.duration,\r\n      easing = this.options.easing,\r\n      lerp = !duration && this.options.lerp,\r\n      onComplete = null,\r\n      force = false, // scroll even if stopped\r\n      programmatic = true, // called from outside of the class\r\n    } = {}\r\n  ) {\r\n    if ((this.isStopped || this.isLocked) && !force) return\r\n\r\n    // keywords\r\n    if (['top', 'left', 'start'].includes(target)) {\r\n      target = 0\r\n    } else if (['bottom', 'right', 'end'].includes(target)) {\r\n      target = this.limit\r\n    } else {\r\n      let node\r\n\r\n      if (typeof target === 'string') {\r\n        // CSS selector\r\n        node = document.querySelector(target)\r\n      } else if (target?.nodeType) {\r\n        // Node element\r\n        node = target\r\n      }\r\n\r\n      if (node) {\r\n        if (this.options.wrapper !== window) {\r\n          // nested scroll offset correction\r\n          const wrapperRect = this.options.wrapper.getBoundingClientRect()\r\n          offset -= this.isHorizontal ? wrapperRect.left : wrapperRect.top\r\n        }\r\n\r\n        const rect = node.getBoundingClientRect()\r\n\r\n        target =\r\n          (this.isHorizontal ? rect.left : rect.top) + this.animatedScroll\r\n      }\r\n    }\r\n\r\n    if (typeof target !== 'number') return\r\n\r\n    target += offset\r\n    target = Math.round(target)\r\n\r\n    if (this.options.infinite) {\r\n      if (programmatic) {\r\n        this.targetScroll = this.animatedScroll = this.scroll\r\n      }\r\n    } else {\r\n      target = clamp(0, target, this.limit)\r\n    }\r\n\r\n    if (immediate) {\r\n      this.animatedScroll = this.targetScroll = target\r\n      this.setScroll(this.scroll)\r\n      this.reset()\r\n      onComplete?.(this)\r\n      return\r\n    }\r\n\r\n    if (!programmatic) {\r\n      if (target === this.targetScroll) return\r\n\r\n      this.targetScroll = target\r\n    }\r\n\r\n    this.animate.fromTo(this.animatedScroll, target, {\r\n      duration,\r\n      easing,\r\n      lerp,\r\n      onStart: () => {\r\n        // started\r\n        if (lock) this.isLocked = true\r\n        this.isScrolling = true\r\n      },\r\n      onUpdate: (value, completed) => {\r\n        this.isScrolling = true\r\n\r\n        // updated\r\n        this.velocity = value - this.animatedScroll\r\n        this.direction = Math.sign(this.velocity)\r\n\r\n        this.animatedScroll = value\r\n        this.setScroll(this.scroll)\r\n\r\n        if (programmatic) {\r\n          // wheel during programmatic should stop it\r\n          this.targetScroll = value\r\n        }\r\n\r\n        if (!completed) this.emit()\r\n\r\n        if (completed) {\r\n          this.reset()\r\n          this.emit()\r\n          onComplete?.(this)\r\n\r\n          // avoid emitting event twice\r\n          this.__preventNextScrollEvent = true\r\n          requestAnimationFrame(() => {\r\n            delete this.__preventNextScrollEvent\r\n          })\r\n        }\r\n      },\r\n    })\r\n  }\r\n\r\n  get rootElement() {\r\n    return this.options.wrapper === window\r\n      ? document.documentElement\r\n      : this.options.wrapper\r\n  }\r\n\r\n  get limit() {\r\n    return this.dimensions.limit[this.isHorizontal ? 'x' : 'y']\r\n  }\r\n\r\n  get isHorizontal() {\r\n    return this.options.orientation === 'horizontal'\r\n  }\r\n\r\n  get actualScroll() {\r\n    // value browser takes into account\r\n    return this.isHorizontal\r\n      ? this.rootElement.scrollLeft\r\n      : this.rootElement.scrollTop\r\n  }\r\n\r\n  get scroll() {\r\n    return this.options.infinite\r\n      ? modulo(this.animatedScroll, this.limit)\r\n      : this.animatedScroll\r\n  }\r\n\r\n  get progress() {\r\n    // avoid progress to be NaN\r\n    return this.limit === 0 ? 1 : this.scroll / this.limit\r\n  }\r\n\r\n  get isSmooth() {\r\n    return this.__isSmooth\r\n  }\r\n\r\n  set isSmooth(value) {\r\n    if (this.__isSmooth !== value) {\r\n      this.__isSmooth = value\r\n      this.toggleClass('lenis-smooth', value)\r\n    }\r\n  }\r\n\r\n  get isScrolling() {\r\n    return this.__isScrolling\r\n  }\r\n\r\n  set isScrolling(value) {\r\n    if (this.__isScrolling !== value) {\r\n      this.__isScrolling = value\r\n      this.toggleClass('lenis-scrolling', value)\r\n    }\r\n  }\r\n\r\n  get isStopped() {\r\n    return this.__isStopped\r\n  }\r\n\r\n  set isStopped(value) {\r\n    if (this.__isStopped !== value) {\r\n      this.__isStopped = value\r\n      this.toggleClass('lenis-stopped', value)\r\n    }\r\n  }\r\n\r\n  get isLocked() {\r\n    return this.__isLocked\r\n  }\r\n\r\n  set isLocked(value) {\r\n    if (this.__isLocked !== value) {\r\n      this.__isLocked = value\r\n      this.toggleClass('lenis-locked', value)\r\n    }\r\n  }\r\n\r\n  get className() {\r\n    let className = 'lenis'\r\n    if (this.isStopped) className += ' lenis-stopped'\r\n    if (this.isLocked) className += ' lenis-locked'\r\n    if (this.isScrolling) className += ' lenis-scrolling'\r\n    if (this.isSmooth) className += ' lenis-smooth'\r\n    return className\r\n  }\r\n\r\n  toggleClass(name, value) {\r\n    this.rootElement.classList.toggle(name, value)\r\n    this.emitter.emit('className change', this)\r\n  }\r\n}\r\n", "/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n", "// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n", "/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n", "/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n", "//@ts-ignore\nimport Lenis from '@studio-freight/lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisOptions,\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\n\n/**\n * @type {ILenisOptions}\n */\nconst defaultLenisOptions: ILenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    eventsTarget: window,\n    lerp: 0.1,\n    duration: 0.75,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    smoothWheel: true,\n    smoothTouch: false,\n    syncTouch: false,\n    syncTouchLerp: 0.1,\n    touchInertiaMultiplier: 35,\n    wheelMultiplier: 1,\n    touchMultiplier: 2,\n    normalizeWheel: false,\n    autoResize: true,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/studio-freight/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: ILenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            smoothTouch: this.lenisOptions.smoothTouch,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            normalizeWheel: this.lenisOptions.normalizeWheel,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"],
  "mappings": "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",
  "names": ["clamp", "min", "input", "max", "Math", "Animate", "advance", "deltaTime", "_this$onUpdate", "this", "isRunning", "completed", "lerp", "value", "x", "y", "to", "t", "exp", "round", "currentTime", "linearProgress", "duration", "easedProgress", "easing", "from", "onUpdate", "call", "stop", "fromTo", "onStart", "Dimensions", "constructor", "wrapper", "content", "autoResize", "resize", "onWrapperResize", "onContentResize", "window", "width", "innerWidth", "height", "innerHeight", "clientWidth", "clientHeight", "scrollHeight", "scrollWidth", "callback", "delay", "timer", "args", "arguments", "context", "clearTimeout", "setTimeout", "apply", "wrapperResizeObserver", "ResizeObserver", "observe", "contentResizeObserver", "destroy", "_this$wrapperResizeOb", "_this$contentResizeOb", "disconnect", "limit", "Emitter", "events", "emit", "event", "callbacks", "i", "length", "on", "cb", "_this$events$event", "push", "_this$events$event2", "filter", "off", "_this$events$event3", "VirtualScroll", "element", "wheelMultiplier", "touchMultiplier", "normalizeWheel", "onTouchStart", "clientX", "clientY", "targetTouches", "touchStart", "lastDelta", "onTouchMove", "deltaX", "deltaY", "emitter", "onTouchEnd", "onWheel", "addEventListener", "passive", "removeEventListener", "Lenis", "document", "documentElement", "wheelEventsTarget", "eventsTarget", "smoothWheel", "smoothTouch", "syncTouch", "syncTouchLerp", "__iosNoInertiaSyncTouchLerp", "touchInertiaMultiplier", "pow", "infinite", "orientation", "gestureOrientation", "onVirtualScroll", "ctrlKey", "isTouch", "type", "includes", "isWheel", "options", "scroll", "composedPath", "slice", "indexOf", "rootElement", "find", "node", "_node$classList", "hasAttribute", "classList", "contains", "isStopped", "isLocked", "preventDefault", "isSmooth", "isScrolling", "animate", "delta", "abs", "hasTouchInertia", "velocity", "scrollTo", "targetScroll", "_extends", "programmatic", "onNativeScroll", "__preventNextScrollEvent", "lastScroll", "animatedScroll", "actualScroll", "direction", "sign", "lenisVersion", "body", "dimensions", "toggleClass", "virtualScroll", "setScroll", "isHorizontal", "scrollLeft", "scrollTop", "reset", "start", "raf", "time", "target", "offset", "immediate", "lock", "onComplete", "force", "_target", "querySelector", "nodeType", "wrapperRect", "getBoundingClientRect", "left", "top", "rect", "requestAnimationFrame", "d", "progress", "__isSmooth", "__isScrolling", "__isStopped", "__isLocked", "className", "name", "toggle", "IO", "constructor", "scrollElements", "rootMargin", "IORaf", "this", "observer", "_init", "IntersectionObserver", "entries", "forEach", "entry", "$targetItem", "find", "item", "$el", "target", "isIntersecting", "isAlreadyIntersected", "_setInview", "_setOutOfView", "scrollElement", "observe", "destroy", "disconnect", "$scrollElement", "unobserve", "setInteractivityOn", "setInview", "setInteractivityOff", "setOutOfView", "attributes", "scrollRepeat", "mapRange", "inMin", "inMax", "outMin", "outMax", "value", "closestNumber", "array", "reduce", "prev", "curr", "Math", "abs", "ScrollElement", "id", "modularInstance", "subscribeElementUpdateFn", "unsubscribeElementUpdateFn", "needRaf", "scrollOrientation", "_this$$el$dataset$scr", "_this$$el$dataset$scr2", "_this$$el$dataset$scr3", "_this$$el$dataset$scr4", "_this$$el$dataset$scr5", "intersection", "metrics", "currentScroll", "translateValue", "progress", "lastProgress", "progressModularModules", "isInview", "isInteractive", "isInFold", "isFirstResize", "scrollClass", "dataset", "scrollOffset", "scrollPosition", "scrollModuleProgress", "scrollCssProgress", "scrollEventProgress", "scrollSpeed", "parseFloat", "scrollCall", "scrollCallSelf", "scrollIgnoreFold", "scrollEnableTouchSpeed", "start", "end", "offsetStart", "offsetEnd", "bcr", "window", "scrollY", "scrollX", "_getProgressModularModules", "_resize", "onResize", "onRender", "smooth", "wSize", "innerHeight", "innerWidth", "_computeProgress", "isNaN", "max", "style", "transform", "classList", "add", "from", "_getScrollCallFrom", "_dispatchCall", "remove", "getBoundingClientRect", "_computeMetrics", "_computeIntersection", "top", "left", "height", "width", "metricsSize", "offset", "split", "undefined", "trim", "scrollPositionStart", "scrollPositionEnd", "viewportStart", "includes", "parseInt", "replace", "viewportEnd", "forcedProgress", "_setCssProgress", "_setCustomEventProgress", "modularModules", "call", "moduleName", "moduleId", "currentProgress", "setProperty", "toString", "customEventName", "customEvent", "CustomEvent", "detail", "dispatchEvent", "modulesIdNames", "Object", "keys", "filter", "key", "modules", "length", "modulesIdName", "module", "moduleObj", "push", "closestIntersectionValue", "way", "_this$attributes$scro", "_this$attributes", "callParameters", "callSelf", "_targetModuleId", "func", "targetModuleId", "ATTRIBUTES_THAT_NEED_RAF", "Core", "triggerRootMargin", "rafRootMargin", "$scrollContainer", "triggeredScrollElements", "RAFScrollElements", "scrollElementsToUpdate", "IOTriggerInstance", "IORafInstance", "console", "error", "$scrollElements", "querySelectorAll", "$scrollElementsArr", "Array", "_subscribeScrollElements", "_unsubscribeAllScrollElements", "removeScrollElements", "$oldContainer", "$scrollElementsToRemove", "index", "indexOf", "splice", "targetScrollElementToUpdate", "targetScrollElement", "_unsubscribeElementUpdate", "scrollElementItem", "addScrollElements", "$newContainer", "ids", "fromIndex", "toObserve", "_checkRafNeeded", "scrollElementInstance", "_subscribeElementUpdate", "bind", "scrollElementToUpdate", "attributesThatNeedRaf", "removeAttribute", "attributeToRemove", "attribute", "map", "test", "join", "RO", "resizeElements", "resizeCallback", "$resizeElements", "isFirstObserve", "ResizeObserver", "_this$resizeCallback", "$resizeElement", "defaultLenisOptions", "wrapper", "content", "document", "documentElement", "eventsTarget", "lerp", "duration", "orientation", "gestureOrientation", "smoothWheel", "smoothTouch", "syncTouch", "syncTouchLerp", "touchInertiaMultiplier", "wheelMultiplier", "touchMultiplier", "normalizeWheel", "autoResize", "easing", "t", "min", "pow", "LocomotiveScroll", "lenisOptions", "autoStart", "scrollCallback", "initCustomTicker", "destroyCustomTicker", "rafPlaying", "lenisInstance", "coreInstance", "rafInstance", "ROInstance", "_onRenderBind", "_onResizeBind", "_onScrollToBind", "_extends", "assign", "_onRender", "_onScrollTo", "_onResize", "_this$lenisInstance", "Lenis", "on", "setAttribute", "options", "requestAnimationFrame", "rootElement", "_bindEvents", "warn", "_this$coreInstance", "stop", "_unbindEvents", "_this$coreInstance2", "_bindScrollToEvents", "body", "addEventListener", "_unbindScrollToEvents", "removeEventListener", "$container", "$rootContainer", "$scrollToElements", "_this$coreInstance3", "scroll", "_this$lenisInstance2", "_this$coreInstance4", "raf", "Date", "now", "isSmooth", "event", "_event$currentTarget", "preventDefault", "$target", "currentTarget", "getAttribute", "scrollTo", "_this$lenisInstance3", "_raf", "_this$lenisInstance4", "cancelAnimationFrame", "_this$coreInstance5", "_this$coreInstance6", "resize", "_this$lenisInstance5", "immediate", "lock", "force", "onComplete"]
}
